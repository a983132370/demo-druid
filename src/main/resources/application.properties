# -------------
server.port=8080
#---------------------------------------mysql
#mysql数据源配置 druid https://github.com/alibaba/druid
#mysql
#spring.datasource.druid.url=jdbc:mysql://ip:3306/db?useUnicode=true&characterEncoding=UTF8&autoReconnect=true&rewriteBatchedStatements=TRUE&zeroDateTimeBehavior=convertToNull
spring.datasource.druid.username=sa
spring.datasource.druid.password=admin
# 配置初始化大小、最小、最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=1
# 配置获取连接等待超时的时间 毫秒
spring.datasource.druid.max-wait=60000
spring.datasource.druid.validation-query=SELECT 1
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true
######Druid监控配置######
#下面配置说明请参考Druid Github Wiki，配置_配置WebStatFilter
spring.datasource.druid.WebStatFilter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#下面配置说明请参考Druid Github Wiki，配置_StatViewServlet配置
spring.datasource.druid.StatViewServlet.loginUsername=druid
spring.datasource.druid.StatViewServlet.loginPassword=druid
#mysql jdbc
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#---------------------------------------mysql end
#以下使用h2数据库 为了简单展示示例数据 如不需要 全部注掉  放开上面mysql的配置
#h2
spring.datasource.druid.url=jdbc:h2:file:~/.h2/testdb 
#h2 Driver
spring.datasource.driver-class-name =org.h2.Driver
#进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。
spring.h2.console.settings.web-allow-others=true
#进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。
spring.h2.console.path=/h2-console
#进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。
spring.h2.console.enabled=true
#进行该配置后，每次启动程序，数据初始化都会运行
spring.datasource.initialize=true
spring.datasource.schema=classpath:db/schema.sql
spring.datasource.data=classpath:db/data.sql

# freemarker (FreeMarkerAutoConfiguration 自动配置的)
# Enable template caching.
spring.freemarker.cache=false
# Template encoding.
spring.freemarker.charset=UTF-8
# Check that the templates location exists.
spring.freemarker.check-template-location=false
# Content-Type value.
spring.freemarker.content-type=text/html
# Enable MVC view resolution for this technology.
spring.freemarker.enabled=true
#spring.freemarker.prefix=
spring.freemarker.suffix=.ftl
spring.freemarker.template-loader-path=classpath:/templates/
#spring.freemarker.view-names= # White list of view names that can be resolved.